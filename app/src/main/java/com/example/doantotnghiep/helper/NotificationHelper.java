package com.example.doantotnghiep.helper;

import android.content.Context;
import android.util.Log;

import com.example.doantotnghiep.MyApplication;
import com.example.doantotnghiep.model.Notification;
import com.example.doantotnghiep.model.Order;
import com.example.doantotnghiep.prefs.DataStoreManager;
import com.example.doantotnghiep.utils.Constant;

/**
 * Helper class ƒë·ªÉ qu·∫£n l√Ω notifications trong ·ª©ng d·ª•ng
 */
public class NotificationHelper {

    private static final String TAG = "NotificationHelper";

    /**
     * T·∫°o th√¥ng b√°o khi tr·∫°ng th√°i ƒë∆°n h√†ng thay ƒë·ªïi
     */
    public static void createOrderStatusNotification(Context context, String userEmail, Long orderId, int oldStatus, int newStatus) {
        if (context == null || orderId == null) return;

        try {
            // T·∫°o notification d·ª±a tr√™n tr·∫°ng th√°i m·ªõi
            Notification notification = createOrderNotificationByStatus(userEmail, orderId, newStatus);

            if (notification != null) {
                saveNotificationToFirebase(context, notification);
                Log.d(TAG, "Order notification created for order: " + orderId + ", status: " + newStatus);
            }
        } catch (Exception e) {
            Log.e(TAG, "Error creating order notification: " + e.getMessage());
        }
    }

    /**
     * T·∫°o th√¥ng b√°o khuy·∫øn m√£i
     */
    public static void createPromotionNotification(Context context, String userEmail, String title, String message, String promoCode) {
        if (context == null) return;

        try {
            Notification notification = Notification.createPromotionNotification(userEmail, title, message, promoCode);
            notification.setId(System.currentTimeMillis());

            saveNotificationToFirebase(context, notification);
            Log.d(TAG, "Promotion notification created: " + title);
        } catch (Exception e) {
            Log.e(TAG, "Error creating promotion notification: " + e.getMessage());
        }
    }

    /**
     * T·∫°o th√¥ng b√°o h·ªá th·ªëng
     */
    public static void createSystemNotification(Context context, String userEmail, String title, String message) {
        if (context == null) return;

        try {
            Notification notification = Notification.createSystemNotification(userEmail, title, message);
            notification.setId(System.currentTimeMillis());

            saveNotificationToFirebase(context, notification);
            Log.d(TAG, "System notification created: " + title);
        } catch (Exception e) {
            Log.e(TAG, "Error creating system notification: " + e.getMessage());
        }
    }

    /**
     * T·∫°o th√¥ng b√°o ch√†o m·ª´ng cho user m·ªõi
     */
    public static void createWelcomeNotification(Context context, String userEmail) {
        String title = "üéâ Ch√†o m·ª´ng ƒë·∫øn v·ªõi ·ª©ng d·ª•ng!";
        String message = "C·∫£m ∆°n b·∫°n ƒë√£ tham gia. Kh√°m ph√° c√°c m√≥n ƒÉn ngon v√† ∆∞u ƒë√£i h·∫•p d·∫´n ngay th√¥i!";
        createSystemNotification(context, userEmail, title, message);
    }

    /**
     * T·∫°o th√¥ng b√°o khi c√≥ ƒë∆°n h√†ng m·ªõi (cho admin)
     */
    public static void createNewOrderNotificationForAdmin(Context context, Long orderId, String customerEmail) {
        String adminEmail = Constant.MAIN_ADMIN;
        String title = "üì¶ ƒê∆°n h√†ng m·ªõi #" + orderId;
        String message = "C√≥ ƒë∆°n h√†ng m·ªõi t·ª´ kh√°ch h√†ng: " + customerEmail;
        createSystemNotification(context, adminEmail, title, message);
    }

    /**
     * T·∫°o th√¥ng b√°o nh·∫Øc nh·ªü ƒë√°nh gi√° sau khi ho√†n th√†nh ƒë∆°n h√†ng
     */
    public static void createReviewReminderNotification(Context context, String userEmail, Long orderId) {
        String title = "‚≠ê ƒê√°nh gi√° ƒë∆°n h√†ng #" + orderId;
        String message = "H√£y chia s·∫ª tr·∫£i nghi·ªám c·ªßa b·∫°n ƒë·ªÉ gi√∫p ch√∫ng t√¥i c·∫£i thi·ªán d·ªãch v·ª•!";

        Notification notification = new Notification(title, message, Notification.TYPE_REMINDER, userEmail);
        notification.setId(System.currentTimeMillis());
        notification.setOrderId(orderId);
        notification.setActionText("ƒê√°nh gi√° ngay");
        notification.setActionData(String.valueOf(orderId));

        saveNotificationToFirebase(context, notification);
    }

    /**
     * T·∫°o notification object d·ª±a tr√™n tr·∫°ng th√°i ƒë∆°n h√†ng
     */
    private static Notification createOrderNotificationByStatus(String userEmail, Long orderId, int status) {
        String title = "üì¶ C·∫≠p nh·∫≠t ƒë∆°n h√†ng #" + orderId;
        String message;
        int notificationStatus;

        switch (status) {
            case Order.STATUS_NEW:
                message = "ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ti·∫øp nh·∫≠n v√† ƒëang ch·ªù x√°c nh·∫≠n";
                notificationStatus = Notification.ORDER_STATUS_CONFIRMED;
                break;
            case Order.STATUS_DOING:
                message = "ƒê∆°n h√†ng c·ªßa b·∫°n ƒëang ƒë∆∞·ª£c chu·∫©n b·ªã v·ªõi s·ª± t·∫≠n t√¢m";
                notificationStatus = Notification.ORDER_STATUS_PREPARING;
                break;
            case Order.STATUS_ARRIVED:
                message = "ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ s·∫µn s√†ng v√† ƒëang ƒë∆∞·ª£c giao ƒë·∫øn";
                notificationStatus = Notification.ORDER_STATUS_SHIPPING;
                break;
            case Order.STATUS_COMPLETE:
                message = "ƒê∆°n h√†ng ƒë√£ ho√†n th√†nh! C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng ch√∫ng t√¥i";
                notificationStatus = Notification.ORDER_STATUS_DELIVERED;
                break;
            default:
                return null;
        }

        Notification notification = new Notification(title, message, userEmail, orderId, notificationStatus);
        notification.setId(System.currentTimeMillis());
        return notification;
    }

    /**
     * L∆∞u notification v√†o Firebase
     */
    private static void saveNotificationToFirebase(Context context, Notification notification) {
        try {
            MyApplication.get(context)
                    .getNotificationDatabaseReference(String.valueOf(notification.getId()))
                    .setValue(notification)
                    .addOnSuccessListener(aVoid ->
                            Log.d(TAG, "Notification saved successfully: " + notification.getId()))
                    .addOnFailureListener(e ->
                            Log.e(TAG, "Failed to save notification: " + e.getMessage()));
        } catch (Exception e) {
            Log.e(TAG, "Error saving notification to Firebase: " + e.getMessage());
        }
    }

    /**
     * ƒê√°nh d·∫•u notification ƒë√£ ƒë·ªçc
     */
    public static void markNotificationAsRead(Context context, long notificationId) {
        if (context == null) return;

        try {
            MyApplication.get(context)
                    .getNotificationDatabaseReference(String.valueOf(notificationId))
                    .child("read")
                    .setValue(true)
                    .addOnSuccessListener(aVoid ->
                            Log.d(TAG, "Notification marked as read: " + notificationId))
                    .addOnFailureListener(e ->
                            Log.e(TAG, "Failed to mark notification as read: " + e.getMessage()));
        } catch (Exception e) {
            Log.e(TAG, "Error marking notification as read: " + e.getMessage());
        }
    }

    /**
     * X√≥a t·∫•t c·∫£ notifications c·ªßa m·ªôt user
     */
    public static void clearAllUserNotifications(Context context, String userEmail) {
        if (context == null) return;

        try {
            MyApplication.get(context)
                    .getNotificationDatabaseReference()
                    .orderByChild("userEmail")
                    .equalTo(userEmail)
                    .addListenerForSingleValueEvent(new com.google.firebase.database.ValueEventListener() {
                        @Override
                        public void onDataChange(@androidx.annotation.NonNull com.google.firebase.database.DataSnapshot snapshot) {
                            for (com.google.firebase.database.DataSnapshot childSnapshot : snapshot.getChildren()) {
                                childSnapshot.getRef().removeValue();
                            }
                            Log.d(TAG, "All notifications cleared for user: " + userEmail);
                        }

                        @Override
                        public void onCancelled(@androidx.annotation.NonNull com.google.firebase.database.DatabaseError error) {
                            Log.e(TAG, "Failed to clear notifications: " + error.getMessage());
                        }
                    });
        } catch (Exception e) {
            Log.e(TAG, "Error clearing user notifications: " + e.getMessage());
        }
    }

    /**
     * G·ª≠i notification chung cho t·∫•t c·∫£ users (admin only)
     */
    public static void sendBroadcastNotification(Context context, String title, String message, int type) {
        // Implementation cho broadcast notification n·∫øu c·∫ßn
        // C√≥ th·ªÉ s·ª≠ d·ª•ng Firebase Cloud Messaging (FCM) cho ch·ª©c nƒÉng n√†y
        Log.d(TAG, "Broadcast notification feature not implemented yet");
    }

    /**
     * Ki·ªÉm tra xem user c√≥ notifications ch∆∞a ƒë·ªçc kh√¥ng
     */
    public static void checkUnreadNotifications(Context context, String userEmail, UnreadNotificationCallback callback) {
        if (context == null || callback == null) return;

        try {
            MyApplication.get(context)
                    .getNotificationDatabaseReference()
                    .orderByChild("userEmail")
                    .equalTo(userEmail)
                    .addListenerForSingleValueEvent(new com.google.firebase.database.ValueEventListener() {
                        @Override
                        public void onDataChange(@androidx.annotation.NonNull com.google.firebase.database.DataSnapshot snapshot) {
                            int unreadCount = 0;
                            for (com.google.firebase.database.DataSnapshot childSnapshot : snapshot.getChildren()) {
                                Notification notification = childSnapshot.getValue(Notification.class);
                                if (notification != null && !notification.isRead()) {
                                    unreadCount++;
                                }
                            }
                            callback.onUnreadCountReceived(unreadCount);
                        }

                        @Override
                        public void onCancelled(@androidx.annotation.NonNull com.google.firebase.database.DatabaseError error) {
                            callback.onUnreadCountReceived(0);
                        }
                    });
        } catch (Exception e) {
            Log.e(TAG, "Error checking unread notifications: " + e.getMessage());
            callback.onUnreadCountReceived(0);
        }
    }

    /**
     * Interface ƒë·ªÉ callback s·ªë l∆∞·ª£ng notification ch∆∞a ƒë·ªçc
     */
    public interface UnreadNotificationCallback {
        void onUnreadCountReceived(int count);
    }
}