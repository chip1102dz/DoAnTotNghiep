package com.example.doantotnghiep.activity;

import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.TextView;

import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.appcompat.app.AlertDialog;
import androidx.recyclerview.widget.GridLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.example.doantotnghiep.MyApplication;
import com.example.doantotnghiep.R;
import com.example.doantotnghiep.adapter.TopUpAmountAdapter;
import com.example.doantotnghiep.databinding.ActivityTopUpBinding;
import com.example.doantotnghiep.helper.VietQRHelper;
import com.example.doantotnghiep.model.TopUpAmount;
import com.example.doantotnghiep.model.User;
import com.example.doantotnghiep.prefs.DataStoreManager;
import com.example.doantotnghiep.utils.GlobalFunction;
import com.example.doantotnghiep.utils.StringUtil;
import com.google.firebase.database.DatabaseReference;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TopUpActivity extends BaseActivity {

    private static final String TAG = "TopUpActivity";

    private ActivityTopUpBinding binding;

    // UI Components
    private TextView tvCurrentBalance;
    private EditText edtCustomAmount;
    private RecyclerView rcvTopUpAmounts;
    private Button btnTopUp;

    // Data
    private TopUpAmountAdapter topUpAmountAdapter;
    private List<TopUpAmount> listTopUpAmounts;
    private double selectedAmount = 0;
    private User currentUser;

    // QR Payment Launcher
    private ActivityResultLauncher<Intent> qrPaymentLauncher;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        binding = ActivityTopUpBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());

        initToolbar();
        initUi();
        initListener();
        loadCurrentBalance();
        setupTopUpAmounts();
        setupActivityResultLauncher();

        // Ki·ªÉm tra th√¥ng tin ng√¢n h√†ng
        checkBankInfo();
    }

    private void initToolbar() {
        ImageView imgToolbarBack = binding.toolbar.imgToolbarBack;
        TextView tvToolbarTitle = binding.toolbar.tvToolbarTitle;
        imgToolbarBack.setOnClickListener(view -> finish());
        tvToolbarTitle.setText("N·∫°p ti·ªÅn VietQR");
    }

    private void initUi() {
        tvCurrentBalance = binding.tvCurrentBalance;
        edtCustomAmount = binding.edtCustomAmount;
        rcvTopUpAmounts = binding.rcvTopUpAmounts;
        btnTopUp = binding.btnTopUp;
    }

    private void initListener() {
        btnTopUp.setOnClickListener(v -> processVietQRTopUp());

        edtCustomAmount.setOnFocusChangeListener((v, hasFocus) -> {
            if (hasFocus) {
                clearPresetSelection();
                selectedAmount = 0;
            }
        });

        // Clear focus khi click ngo√†i EditText
        binding.getRoot().setOnClickListener(v -> {
            edtCustomAmount.clearFocus();
            GlobalFunction.hideSoftKeyboard(this);
        });
    }

    private void loadCurrentBalance() {
        currentUser = DataStoreManager.getUser();
        if (currentUser != null) {
            tvCurrentBalance.setText(currentUser.getFormattedBalance());
        } else {
            tvCurrentBalance.setText("0ƒë");
            showToastMessage("L·ªói t·∫£i th√¥ng tin ng∆∞·ªùi d√πng");
        }
    }

    private void setupTopUpAmounts() {
        listTopUpAmounts = new ArrayList<>();
        listTopUpAmounts.add(new TopUpAmount(50000, "50.000ƒë"));
        listTopUpAmounts.add(new TopUpAmount(100000, "100.000ƒë"));
        listTopUpAmounts.add(new TopUpAmount(200000, "200.000ƒë"));
        listTopUpAmounts.add(new TopUpAmount(500000, "500.000ƒë"));
        listTopUpAmounts.add(new TopUpAmount(1000000, "1.000.000ƒë"));
        listTopUpAmounts.add(new TopUpAmount(2000000, "2.000.000ƒë"));

        GridLayoutManager gridLayoutManager = new GridLayoutManager(this, 2);
        rcvTopUpAmounts.setLayoutManager(gridLayoutManager);

        topUpAmountAdapter = new TopUpAmountAdapter(listTopUpAmounts, new TopUpAmountAdapter.IClickTopUpAmountListener() {
            @Override
            public void onClickTopUpAmount(TopUpAmount topUpAmount) {
                selectedAmount = topUpAmount.getAmount();
                edtCustomAmount.setText("");
                edtCustomAmount.clearFocus();
                GlobalFunction.hideSoftKeyboard(TopUpActivity.this);
            }
        });
        rcvTopUpAmounts.setAdapter(topUpAmountAdapter);
    }

    private void setupActivityResultLauncher() {
        qrPaymentLauncher = registerForActivityResult(
                new ActivityResultContracts.StartActivityForResult(),
                result -> {
                    if (result.getResultCode() == RESULT_OK) {
                        // QR Payment th√†nh c√¥ng
                        handlePaymentSuccess();
                    } else {
                        // QR Payment b·ªã h·ªßy ho·∫∑c th·∫•t b·∫°i
                        showToastMessage("Thanh to√°n b·ªã h·ªßy");
                    }
                }
        );
    }

    private void checkBankInfo() {
        if (!VietQRHelper.isValidBankInfo()) {
            showBankInfoWarning();
        }
    }

    private void showBankInfoWarning() {
        new AlertDialog.Builder(this)
                .setTitle("‚ö†Ô∏è Th√¥ng b√°o")
                .setMessage("·ª®ng d·ª•ng ƒëang s·ª≠ d·ª•ng th√¥ng tin ng√¢n h√†ng m·∫´u.\n\n" +
                        "ƒê·ªÉ s·ª≠ d·ª•ng th·ª±c t·∫ø, vui l√≤ng:\n" +
                        "1. C·∫≠p nh·∫≠t th√¥ng tin ng√¢n h√†ng th·∫≠t trong VietQRHelper\n" +
                        "2. Thay ƒë·ªïi BANK_CODE, ACCOUNT_NUMBER, ACCOUNT_NAME")
                .setPositiveButton("ƒê√£ hi·ªÉu", null)
                .setNegativeButton("Xem th√¥ng tin", (dialog, which) -> showCurrentBankInfo())
                .show();
    }

    private void showCurrentBankInfo() {
        String bankName = VietQRHelper.getBankName(VietQRHelper.BANK_CODE);
        new AlertDialog.Builder(this)
                .setTitle("Th√¥ng tin ng√¢n h√†ng hi·ªán t·∫°i")
                .setMessage("üè¶ Ng√¢n h√†ng: " + bankName + "\n" +
                        "üì± M√£ ng√¢n h√†ng: " + VietQRHelper.BANK_CODE + "\n" +
                        "üí≥ S·ªë t√†i kho·∫£n: " + VietQRHelper.ACCOUNT_NUMBER + "\n" +
                        "üë§ Ch·ªß t√†i kho·∫£n: " + VietQRHelper.ACCOUNT_NAME)
                .setPositiveButton("OK", null)
                .show();
    }

    private void clearPresetSelection() {
        for (TopUpAmount amount : listTopUpAmounts) {
            amount.setSelected(false);
        }
        if (topUpAmountAdapter != null) {
            topUpAmountAdapter.notifyDataSetChanged();
        }
    }

    private void processVietQRTopUp() {
        double amountToTopUp = getSelectedAmount();

        // Validation
        if (amountToTopUp <= 0) {
            showToastMessage("Vui l√≤ng ch·ªçn ho·∫∑c nh·∫≠p s·ªë ti·ªÅn c·∫ßn n·∫°p");
            return;
        }

        if (amountToTopUp < 10000) {
            showToastMessage("S·ªë ti·ªÅn n·∫°p t·ªëi thi·ªÉu l√† 10.000ƒë");
            return;
        }

        if (amountToTopUp > 10000000) {
            showToastMessage("S·ªë ti·ªÅn n·∫°p t·ªëi ƒëa l√† 10.000.000ƒë");
            return;
        }

        // Hi·ªÉn th·ªã dialog x√°c nh·∫≠n
        showPaymentConfirmDialog(amountToTopUp);
    }

    private void showPaymentConfirmDialog(double amount) {
        String bankName = VietQRHelper.getBankName(VietQRHelper.BANK_CODE);
        String message = String.format(
                "üí∞ S·ªë ti·ªÅn: %s\n" +
                        "üè¶ Ng√¢n h√†ng: %s\n" +
                        "üí≥ S·ªë TK: %s\n" +
                        "üë§ Ch·ªß TK: %s\n\n" +
                        "B·∫°n s·∫Ω ƒë∆∞·ª£c chuy·ªÉn ƒë·∫øn trang QR ƒë·ªÉ thanh to√°n.",
                String.format("%,.0f", amount) + "ƒë",
                bankName,
                VietQRHelper.ACCOUNT_NUMBER,
                VietQRHelper.ACCOUNT_NAME
        );

        new AlertDialog.Builder(this)
                .setTitle("X√°c nh·∫≠n n·∫°p ti·ªÅn")
                .setMessage(message)
                .setPositiveButton("Ti·∫øp t·ª•c", (dialog, which) -> openQRPayment(amount))
                .setNegativeButton("H·ªßy", null)
                .show();
    }

    private void openQRPayment(double amount) {
        try {
            Intent intent = new Intent(this, WebQRPaymentActivity.class);
            Bundle bundle = new Bundle();
            bundle.putDouble("amount", amount);
            bundle.putString("description", "N·∫°p ti·ªÅn ·ª©ng d·ª•ng");
            intent.putExtras(bundle);

            qrPaymentLauncher.launch(intent);

        } catch (Exception e) {
            Log.e(TAG, "Error opening QR payment: " + e.getMessage());
            showToastMessage("L·ªói m·ªü trang thanh to√°n. Vui l√≤ng th·ª≠ l·∫°i.");
        }
    }

    private void handlePaymentSuccess() {
        double amount = getSelectedAmount();

        // C·∫≠p nh·∫≠t s·ªë d∆∞ ng∆∞·ªùi d√πng
        currentUser.addBalance(amount);
        DataStoreManager.setUser(currentUser);

        // C·∫≠p nh·∫≠t Firebase
        updateBalanceInFirebase(currentUser.getBalance(), amount);

        // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
        showSuccessDialog(amount);

        // C·∫≠p nh·∫≠t UI
        tvCurrentBalance.setText(currentUser.getFormattedBalance());

        // Reset selections
        resetSelections();
    }

    private void showSuccessDialog(double amount) {
        new AlertDialog.Builder(this)
                .setTitle("‚úÖ N·∫°p ti·ªÅn th√†nh c√¥ng!")
                .setMessage(String.format(
                        "ƒê√£ n·∫°p: %s\n" +
                                "S·ªë d∆∞ hi·ªán t·∫°i: %s\n\n" +
                                "C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª•!",
                        String.format("%,.0f", amount) + "ƒë",
                        currentUser.getFormattedBalance()
                ))
                .setPositiveButton("OK", null)
                .show();
    }

    private void resetSelections() {
        // Clear selections
        clearPresetSelection();
        edtCustomAmount.setText("");
        selectedAmount = 0;
    }

    private double getSelectedAmount() {
        if (selectedAmount > 0) {
            return selectedAmount;
        }

        String customAmountStr = edtCustomAmount.getText().toString().trim();
        if (!StringUtil.isEmpty(customAmountStr)) {
            try {
                return Double.parseDouble(customAmountStr);
            } catch (NumberFormatException e) {
                return 0;
            }
        }

        return 0;
    }

    private void updateBalanceInFirebase(double newBalance, double topUpAmount) {
        if (currentUser == null) return;

        String userKey = String.valueOf(GlobalFunction.encodeEmailUser());
        DatabaseReference userRef = MyApplication.get(this).getUserDatabaseReference(userKey);

        Map<String, Object> balanceUpdate = new HashMap<>();
        balanceUpdate.put("balance", newBalance);
        balanceUpdate.put("lastTopUpTime", System.currentTimeMillis());
        balanceUpdate.put("lastTopUpAmount", topUpAmount);
        balanceUpdate.put("email", currentUser.getEmail());

        // Th√™m c√°c th√¥ng tin user kh√°c ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh to√†n v·∫πn d·ªØ li·ªáu
        if (!StringUtil.isEmpty(currentUser.getFullName())) {
            balanceUpdate.put("fullName", currentUser.getFullName());
        }
        if (!StringUtil.isEmpty(currentUser.getPhoneNumber())) {
            balanceUpdate.put("phoneNumber", currentUser.getPhoneNumber());
        }
        if (!StringUtil.isEmpty(currentUser.getAddress())) {
            balanceUpdate.put("address", currentUser.getAddress());
        }
        if (!StringUtil.isEmpty(currentUser.getProfileImageUrl())) {
            balanceUpdate.put("profileImageUrl", currentUser.getProfileImageUrl());
        }
        if (!StringUtil.isEmpty(currentUser.getDateOfBirth())) {
            balanceUpdate.put("dateOfBirth", currentUser.getDateOfBirth());
        }
        if (!StringUtil.isEmpty(currentUser.getGender())) {
            balanceUpdate.put("gender", currentUser.getGender());
        }

        userRef.updateChildren(balanceUpdate)
                .addOnSuccessListener(aVoid -> {
                    Log.d(TAG, "Balance updated successfully in Firebase: " + newBalance);
                })
                .addOnFailureListener(e -> {
                    Log.e(TAG, "Failed to update balance in Firebase: " + e.getMessage());
                    showToastMessage("L·ªói khi c·∫≠p nh·∫≠t s·ªë d∆∞: " + e.getMessage());
                });
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        if (topUpAmountAdapter != null) {
            topUpAmountAdapter.release();
        }
    }

    @Override
    protected void onResume() {
        super.onResume();
        // Refresh balance khi quay l·∫°i
        loadCurrentBalance();
    }

    @Override
    protected void onPause() {
        super.onPause();
        // Hide keyboard khi pause
        GlobalFunction.hideSoftKeyboard(this);
    }
}